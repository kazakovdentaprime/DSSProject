@model PostDetailsVM
@inject IHttpContextAccessor Accessor

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userId = Accessor!.HttpContext!.Session.GetString("UserId");
}


<script>
    const textArea = document.querySelector("textarea")
    const commentsList = document.querySelector("#comments")

    let comments = []
    getComments()

    const getComments = () => {
        fetch("/Comments").then(res => res.json()).then(res => {
            comments = res
            const currentComments = commentsList.children
            currentComments.forEach(child => commentsList.removeChild(child))

            commentsList.removeChild()
            comments.forEach(comment => {
                let li = document.createElement("li")
                li.innerText = comment.content
                commentsList.appendChild(li)
            })

        })
    }

    const addComment = (e) => {
        e.preventDefault()
        let comment = { content: textArea.value, userId: @userId }
        fetch("/Comments", {
            method: "POST",
            body: JSON.stringify(comment)
        })

        textArea.value = ""
        getComments()
    }
</script>

<h1>Details</h1>

<div>
    <h4>Post</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Body)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Body)
        </dd>
    </dl>
</div>

@if(!string.IsNullOrEmpty(userId))
{
    <textarea id="comment"></textarea>
    <button onclick="addComment">Comment</button>
}

<ul id="comments">

</ul>

<div>
    <a asp-action="Index">Back to List</a>
</div>